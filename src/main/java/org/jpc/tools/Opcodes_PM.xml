<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <jcc>        {
            int tmpEip = cpu.eip + jmp + blockLength;
            cpu.cs.checkAddress(tmpEip);
            cpu.eip = tmpEip;
            return Branch.T1;
        }
        else
        {
            cpu.eip += blockLength;
            return Branch.T2;
        }</jcc>

  <opcode mnemonic="eip_update">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;</snippet>
    <args size="0"></args>
  </opcode> 

  <opcode mnemonic="aaa">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aaa(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="aad">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aad(cpu, $mask$op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aam">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aam(cpu, $mask$op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aas">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aas(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="adc">
    <return>Branch.None</return>
    <snippet>        boolean incf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2 + (incf ? 1 : 0));
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADC$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">rAX;Iw</args>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="add">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="add_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="add_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="and">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="8">Eb;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>

  <opcode mnemonic="and_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="and_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="arpl">
    <return>Branch.None</return>
    <snippet>        int sel1 = $op1.get;
        int sel2 = $op2.get;
        if ((sel1 &amp; 3) &lt; (sel2 &amp; 3))
        {
            cpu.zf(true);
            $op1.set $cast(sel1 | (sel2 &amp; 3)));
        } else
        {
            cpu.zf(false);
        }</snippet>
    <args size="16">Ew;Gw</args>
  </opcode>

  <opcode mnemonic="bound">
    <return>Branch.None</return>
    <snippet>        short lower = $op2.get160);
	short upper = $op2.get162);
	short index = $op1.get;
	if ((index &lt; lower) || (index > upper))
	    throw ProcessorException.BOUND_RANGE;</snippet>
    <args size="16">Gw;M</args>
  </opcode>
  <opcode mnemonic="bound">
    <return>Branch.None</return>
    <snippet>        int lower = $op2.get320);
	int upper = $op2.get324);
	int index = $op1.get;
	if ((index &lt; lower) || (index > upper))
	    throw ProcessorException.BOUND_RANGE;</snippet>
    <args size="32">Gd;M</args>
  </opcode>

  <opcode mnemonic="bswap_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setInteger.reverseBytes($op1.get));</snippet>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
  </opcode>

  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($op2.get));
	}</snippet>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($mask$op2.get));
	}</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>

  <opcode mnemonic="call_o16">
    <return>Branch.T1</return>
    <snippet>                cpu.eip += blockLength;
        int tmpEip = 0xffff &amp; (cpu.eip + jmp);
        cpu.cs.checkAddress(tmpEip);
        if ((0xffff &amp; cpu.r_sp.get16()) &lt; 2)
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push16((short)cpu.eip);
        cpu.eip = tmpEip;</snippet>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="call_o16">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        int tempEIP = $op1.get &amp; 0xffff;
        cpu.cs.checkAddress(tempEIP);
        if ((cpu.r_sp.get16() &lt; 2) &amp;&amp; (cpu.r_sp.get16() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push16((short)cpu.eip);
        cpu.eip = tempEIP;</snippet>
    <args size="16">Ew</args>
  </opcode>
  <opcode mnemonic="call_o32">
    <return>Branch.T1</return>
    <snippet>                
        cpu.eip += blockLength;
        if ((cpu.r_esp.get32() &lt; 4) &amp;&amp; (cpu.r_esp.get32() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        int tmpEip = cpu.eip + jmp;
        cpu.cs.checkAddress(tmpEip);
        cpu.push32(cpu.eip);
        cpu.eip = tmpEip;</snippet>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="call_o32">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        int target = $op1.get;
        cpu.cs.checkAddress(target);
        if ((cpu.r_esp.get32() &lt; 4) &amp;&amp; (cpu.r_esp.get32() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push32(cpu.eip);
        cpu.eip = target;</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>
  <opcode mnemonic="call_o16">
    <return>Branch.Call_Unknown</return>
    <snippet>                cpu.eip += blockLength;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.call_far_pm_o16_a32(0xffff &amp; cs, 0xffff &amp; targetEip);
        else
            cpu.call_far_pm_o16_a16(0xffff &amp; cs, 0xffff &amp; targetEip);</snippet>
    <args size="16">Ep</args>
    <args size="16">Ap</args>
  </opcode>
  <opcode mnemonic="call_o32">
    <return>Branch.Call_Unknown</return>
    <snippet>                cpu.eip += blockLength;
        if (!cpu.ss.getDefaultSizeFlag())
            cpu.call_far_pm_o32_a16(0xffff &amp; cs, targetEip);
        else
            cpu.call_far_pm_o32_a32(0xffff &amp; cs, targetEip);</snippet>
    <args size="32">Ep</args>
    <args size="32">Ap</args>
  </opcode>

  <opcode mnemonic="clc">
    <return>Branch.None</return>
    <snippet>        cpu.cf = false;
        cpu.flagStatus &amp;= NCF;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cld">
    <return>Branch.None</return>
    <snippet>        cpu.df = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cli">
    <return>Branch.None</return>
    <snippet>        if (Processor.cpuLevel >= 5)
        {
            if (((cpu.getCR4() &amp; 2) != 0) &amp;&amp; (cpu.getCPL() == 3)) // Protected mode Virtual Interrupts enabled
            {
                if (cpu.getIOPrivilegeLevel() &lt; 3)
                {
                    cpu.eflagsVirtualInterrupt = false;
                    return Branch.None;
                }
            }
        }
        if ((Processor.cpuLevel &lt; 5) || (!(((cpu.getCR4() &amp; 2) != 0) &amp;&amp; (cpu.getCPL() == 3))))
        {
            if (cpu.getIOPrivilegeLevel() &lt; cpu.getCPL())
                throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);
        }
        cpu.eflagsInterruptEnable = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="clts">
    <return>Branch.None</return>
    <snippet>        if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);//ProcessorException.GENERAL_PROTECTION_0;
		    cpu.setCR0(cpu.getCR0() &amp; ~0x8);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmova">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.cf() &amp;&amp; !cpu.zf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovae">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.cf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovb">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.cf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovbe">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.cf() || cpu.zf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmove">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.zf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovne">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.zf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovg">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of()))
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovge">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.sf() == cpu.of())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovl">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.sf() != cpu.of())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovle">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.zf() || (cpu.sf() != cpu.of()))
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovs">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.sf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovns">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.sf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovo">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.of())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovno">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.of())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovp">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (cpu.pf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="cmovnp">
    <return>Branch.None</return>
    <snippet>        int tmp = $op2.get;
        if (!cpu.pf())
            $op1.set$casttmp);</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>

  <opcode mnemonic="cmp">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="cmp_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="cmp_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="cmpxchg">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = cpu.r_eax.get$size();
        cpu.flagOp2 = $op1.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;
        if (cpu.flagOp1 == cpu.flagOp2)
        {
            cpu.zf(true);
            $op1.set$cast$op2.get);
        }
        else
        {
            cpu.zf(false);
            cpu.r_eax.set$size($op1.get);
        }</snippet>
    <args size="8">Eb;Gb</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="cmpxchg8b">
    <return>Branch.None</return>
    <snippet>        long val1 = cpu.r_edx.get32()&amp; 0xffffffffL;
        val1 = val1 &lt;&lt; 32;
        val1 |= (0xffffffffL &amp; cpu.r_eax.get32());
        long val2 = cpu.linearMemory.getQuadWord($op1.get);
        if (val1 == val2)
        {
            cpu.zf(true);
            long res = cpu.r_ecx.get32()&amp; 0xffffffffL;
            res = res &lt;&lt; 32;
            res |= (0xffffffffL &amp; cpu.r_ebx.get32());
            cpu.linearMemory.setQuadWord($op1.get, res);
        }
        else
        {
            cpu.zf(false);
            cpu.r_eax.set32((int)val2);
            cpu.r_edx.set32((int)(val2 >> 32));
        }</snippet>
    <args size="64">M</args>
  </opcode>

  <opcode mnemonic="cpuid">
    <return>Branch.None</return>
    <snippet>        cpu.cpuid();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cwd">
    <return>Branch.None</return>
    <snippet>        if ((short)cpu.r_ax.get16() &lt; 0)
            cpu.r_dx.set16((short)-1);
        else
            cpu.r_dx.set16((short)0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cwde">
    <return>Branch.None</return>
    <snippet>            cpu.r_eax.set32((short)cpu.r_ax.get16());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="daa">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.daa(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="das">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.das(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="dec">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="dec_o16">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="16">eAX</args>
    <args size="16">eBX</args>
    <args size="16">eCX</args>
    <args size="16">eDX</args>
    <args size="16">eSI</args>
    <args size="16">eDI</args>
    <args size="16">eSP</args>
    <args size="16">eBP</args>
  </opcode>

  <opcode mnemonic="dec_o32">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.setcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="32">eAX</args>
    <args size="32">eBX</args>
    <args size="32">eCX</args>
    <args size="32">eDX</args>
    <args size="32">eSI</args>
    <args size="32">eDI</args>
    <args size="32">eSP</args>
    <args size="32">eBP</args>
  </opcode>

  <opcode mnemonic="emms">
    <return>Branch.None</return>
    <snippet>        cpu.fpu.setTagWord(0xffff);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="enter_o16">
    <return>Branch.None</return>
    <snippet>            int frameSize = 0xffff &amp; $op1.get;
        int nestingLevel = $op2.get;
        nestingLevel &amp;= 0x1f;

        cpu.push16((short)cpu.r_bp.get16());
        int frame_ptr16 = 0xffff &amp; cpu.r_esp.get16();

	if (cpu.ss.getDefaultSizeFlag())
        {
            int tmpebp = cpu.r_ebp.get32();
            if (nestingLevel != 0) {
	        while (--nestingLevel != 0) {
                    tmpebp -= 2;
                    cpu.push16(cpu.ss.getWord(tmpebp));
                }
                cpu.push16((short)frame_ptr16);
            }
        } else
        {
            int tmpbp = 0xffff &amp; cpu.r_ebp.get16();
            if (nestingLevel != 0) {
	        while (--nestingLevel != 0) {
                    tmpbp -= 2;
                    cpu.push16(cpu.ss.getWord(tmpbp));
                }
                cpu.push16((short)frame_ptr16);
            }
        }

        cpu.r_sp.set16((short)(cpu.r_sp.get16()-frameSize)); // TODO: do a write permission check here
        cpu.r_bp.set16((short)frame_ptr16);</snippet>
    <args size="16">Iw;Ib</args>
  </opcode>

  <opcode mnemonic="enter_o32">
    <return>Branch.None</return>
    <snippet>            int frameSize = 0xffff &amp; $op1.get;
        int nestingLevel = $op2.get;
        nestingLevel &amp;= 0x1f;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.enter_o32_a32(frameSize, nestingLevel);
        else
            cpu.enter_o32_a16(frameSize, nestingLevel);</snippet>
    <args size="16">Iw;Ib</args>
  </opcode>

  <opcode mnemonic="wait">
    <return>Branch.None</return>
    <snippet>        cpu.fpu.checkExceptions();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="hlt">
    <return>Branch.Jmp_Unknown</return>
    <snippet>            cpu.eip += blockLength;
        if (cpu.getCPL() != 0)
            throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);
        else
            cpu.waitForInterrupt();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="in">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead8($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">AL;DX</args>
  </opcode>
  <opcode mnemonic="in_o16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead16($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="16">eAX;DX</args>
  </opcode>
  <opcode mnemonic="in_o32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead32($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="32">eAX;DX</args>
  </opcode>

  <opcode mnemonic="inc">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="inc_o16">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="16">eAX</args>
    <args size="16">eBX</args>
    <args size="16">eCX</args>
    <args size="16">eDX</args>
    <args size="16">eSP</args>
    <args size="16">eBP</args>
    <args size="16">eSI</args>
    <args size="16">eDI</args>
  </opcode>

  <opcode mnemonic="inc_o32">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="32">eAX</args>
    <args size="32">eBX</args>
    <args size="32">eCX</args>
    <args size="32">eDX</args>
    <args size="32">eSP</args>
    <args size="32">eBP</args>
    <args size="32">eSI</args>
    <args size="32">eDI</args>
  </opcode>

  <opcode mnemonic="int">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.handleSoftProtectedModeInterrupt($mask$op1.get, instructionLength);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="int3">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.handleSoftProtectedModeInterrupt(3, instructionLength);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="into">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.of())
            cpu.handleSoftProtectedModeInterrupt(4, instructionLength);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="invlpg">
    <return>Branch.None</return>
    <snippet>        if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);//ProcessorException.GENERAL_PROTECTION_0;
		    cpu.linearMemory.invalidateTLBEntry($op1.get);</snippet>
    <args size="32">M</args>
  </opcode>

  <opcode mnemonic="iretw">
    <return>Branch.Ret</return>
    <snippet>        if (cpu.ss.getDefaultSizeFlag())
            throw new IllegalStateException("Implement iret_pm_o16_a32");
        else
            cpu.setEFlags(cpu.iret_pm_o16_a16());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="iretd">
    <return>Branch.Ret</return>
    <snippet>        if (cpu.ss.getDefaultSizeFlag())
            cpu.iret_pm_o32_a32();
        else
            cpu.iret_pm_o32_a16();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="je">
    <return></return>
    <snippet>        if (cpu.zf())
</snippet>
<jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jne">
    <return></return>
    <snippet>        if (!cpu.zf())
</snippet>
<jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jl">
    <return></return>
    <snippet>        if (cpu.sf() != cpu.of())
</snippet>
<jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jle">
    <return></return>
    <snippet>        if (cpu.zf() || (cpu.sf() != cpu.of()))
</snippet>
<jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jb">
    <return></return>
    <snippet>        if (cpu.cf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jbe">
    <return></return>
    <snippet>        if (cpu.cf() || cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="ja">
    <return></return>
    <snippet>        if (!cpu.cf() &amp;&amp; !cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jae">
    <return></return>
    <snippet>        if (!cpu.cf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jg">
    <return></return>
    <snippet>        if (!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of()))
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jge">
    <return></return>
    <snippet>        if (cpu.sf() == cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jo">
    <return></return>
    <snippet>        if (cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jno">
    <return></return>
    <snippet>        if (!cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jp">
    <return></return>
    <snippet>        if (cpu.pf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jnp">
    <return></return>
    <snippet>        if (!cpu.pf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="js">
    <return></return>
    <snippet>        if (cpu.sf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jns">
    <return></return>
    <snippet>        if (!cpu.sf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>

  <opcode mnemonic="jcxz">
    <return></return>
    <snippet>        if (cpu.r_cx.get16() == 0)
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>

  <opcode mnemonic="jecxz">
    <return></return>
    <snippet>        if (cpu.r_ecx.get32() == 0)
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>

  <opcode mnemonic="jmp_o16">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.jumpFar_pm(cs, 0xffff &amp; targetEip);</snippet>
    <args size="16">Ap</args>
  </opcode>
  <opcode mnemonic="jmp_o32">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.jumpFar_pm(cs, targetEip);</snippet>
    <args size="32">Ap</args>
  </opcode>
  <opcode mnemonic="jmp_o16">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
cpu.jumpFar_pm(cs, 0xffff &amp; targetEip);</snippet>
    <args size="16">Ep</args>
  </opcode>
  <opcode mnemonic="jmp_o32">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.jumpFar_pm(cs, targetEip);</snippet>
    <args size="32">Ep</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = $mask$op1.get;
        cpu.cs.checkAddress(tmpEip);
        cpu.eip = tmpEip;</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = cpu.eip + jmp &amp; 0xffff;
        cpu.cs.checkAddress(tmpEip);
        cpu.eip = tmpEip;</snippet>
    <args size="16">Jw</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = cpu.eip + jmp;
        cpu.cs.checkAddress(tmpEip);
        cpu.eip = tmpEip;</snippet>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = cpu.eip + jmp;
        cpu.cs.checkAddress(tmpEip);
        cpu.eip = tmpEip;</snippet>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="lahf">
      <return>Branch.None</return>
      <snippet>        int result = 0x02;
        if (cpu.sf()) result |= 0x80;
        if (cpu.zf()) result |= 0x40;
        if (cpu.af()) result |= 0x10;
        if (cpu.pf()) result |= 0x04;
        if (cpu.cf()) result |= 0x01;
        cpu.r_ah.set8((byte) result);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="lar">
      <return>Branch.None</return>
      <snippet>        $op1.setStaticOpcodes.lar(cpu, $op2.get, $op1.get));</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="lsl">
      <return>Branch.None</return>
      <snippet>        $op1.setStaticOpcodes.lsl(cpu, $op2.get, $op1.get));</snippet>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="lea">
    <return>Branch.None</return>
    <snippet>        $op1.set$op2.get);</snippet>
    <args size="16">Gw;M</args>
    <args size="32">Gd;M</args>
  </opcode>

  <opcode mnemonic="leave_o16">
    <return>Branch.None</return>
    <snippet>        if (cpu.ss.getDefaultSizeFlag())
        {
            int tmp = cpu.ss.getWord(cpu.r_ebp.get32());
            cpu.r_esp.set32(cpu.r_ebp.get32() + 2);
            cpu.r_bp.set16(tmp);
        } else
        {
            int tmp = cpu.ss.getWord(0xffff &amp; cpu.r_bp.get16());
            cpu.r_sp.set16(cpu.r_bp.get16() + 2);
            cpu.r_bp.set16(tmp);
        }</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="leave_o32">
    <return>Branch.None</return>
    <snippet>        if (cpu.ss.getDefaultSizeFlag())
        {
            int tmp = cpu.ss.getDoubleWord(cpu.r_ebp.get32());
            cpu.r_esp.set32(cpu.r_ebp.get32() + 4);
            cpu.r_ebp.set32(tmp);
        } else
        {
            int tmp = cpu.ss.getDoubleWord(0xffff &amp; cpu.r_bp.get16());
            cpu.r_sp.set16(cpu.r_bp.get16() + 4);
            cpu.r_ebp.set32(tmp);
        }</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="lmsw">
    <return>Branch.Jmp_Unknown</return>
    <snippet>                if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);//ProcessorException.GENERAL_PROTECTION_0;
        cpu.setCR0((cpu.getCR0() &amp; ~0xe) | ($op1.get &amp; 0xe));
        cpu.eip += blockLength;</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="loop_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if (cpu.r_cx.get16() != 0)
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loop_a32">
      <return></return>
      <snippet>        cpu.r_ecx.set32(cpu.r_ecx.get32()-1);
        if (cpu.r_ecx.get32() != 0)
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loope_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if ((cpu.r_cx.get16() != 0) &amp;&amp; cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>
  <opcode mnemonic="loope_a32">
      <return></return>
      <snippet>        cpu.r_ecx.set32(cpu.r_ecx.get32()-1);
        if ((cpu.r_cx.get32() != 0) &amp;&amp; cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loopne_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if ((cpu.r_cx.get16() != 0) &amp;&amp; !cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loopne_a32">
      <return></return>
      <snippet>        cpu.r_ecx.set32(cpu.r_ecx.get32()-1);
        if ((cpu.r_ecx.get32() != 0) &amp;&amp; !cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="lgdt_o16" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = 0x00ffffff &amp; $op1.get322);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lgdt_o32" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = $op1.get322);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lidt_o16" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = 0x00ffffff &amp; $op1.get322);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lidt_o32" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = $op1.get322);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lldt">
      <return>Branch.None</return>
      <snippet>        int selector = $op1.get &amp; 0xffff;

	if (selector == 0)
        {
	    cpu.ldtr = SegmentFactory.NULL_SEGMENT;
        }
        else
        {
	Segment newSegment = cpu.getSegment(selector &amp; ~0x4);
	if (newSegment.getType() != 0x02)
	    throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, selector, true);

	if (!(newSegment.isPresent()))
	    throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, selector, true);
        cpu.ldtr = newSegment;
        }</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="ltr">
      <return>Branch.None</return>
      <snippet>        int selector = $op1.get;
        if ((selector &amp; 0x4) != 0) //must be gdtr table
	    throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, selector, true);

	Segment tempSegment = cpu.getSegment(selector);

	if ((tempSegment.getType() != 0x01) &amp;&amp; (tempSegment.getType() != 0x09))
	    throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, selector, true);

	if (!(tempSegment.isPresent()))
	    throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, selector, true);

	long descriptor = cpu.readSupervisorQuadWord(cpu.gdtr, (selector &amp; 0xfff8)) | (0x1L &lt;&lt; 41); // set busy flag in segment descriptor
	cpu.setSupervisorQuadWord(cpu.gdtr, selector &amp; 0xfff8, descriptor);
	
	//reload segment
	cpu.tss = cpu.getSegment(selector);</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="8">Ob;AL</args>
    <args size="8">AL;Ob</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="8">ALr8b;Ib</args>
    <args size="8">CLr9b;Ib</args>
    <args size="8">DLr10b;Ib</args>
    <args size="8">BLr11b;Ib</args>
    <args size="8">AHr12b;Ib</args>
    <args size="8">CHr13b;Ib</args>
    <args size="8">DHr14b;Ib</args>
    <args size="8">BHr15b;Ib</args>
    <args size="16">Ew;S</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">rAXr8;Iw</args>
    <args size="16">rCXr9;Iw</args>
    <args size="16">rDXr10;Iw</args>
    <args size="16">rBXr11;Iw</args>
    <args size="16">rSPr12;Iw</args>
    <args size="16">rBPr13;Iw</args>
    <args size="16">rSIr14;Iw</args>
    <args size="16">rDIr15;Iw</args>
    <args size="32">rAXr8;Id</args>
    <args size="32">rCXr9;Id</args>
    <args size="32">rDXr10;Id</args>
    <args size="32">rBXr11;Id</args>
    <args size="32">rSPr12;Id</args>
    <args size="32">rBPr13;Id</args>
    <args size="32">rSIr14;Id</args>
    <args size="32">rDIr15;Id</args>
    <args size="32">R;D</args>
    <args size="32">D;R</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        if (segIndex == Processor.CS_INDEX)
            throw ProcessorException.UNDEFINED;
        $op1.set$cast$op2.get);</snippet>
    <args size="16">S;Ew</args>
    <args size="16">S;Ed</args>
  </opcode>

  <opcode mnemonic="mov" mem="false">
    <return>Branch.None</return>
    <snippet>        op1.set32($op2.get);</snippet>
    <args size="32">Ed;S</args>
  </opcode>

  <opcode mnemonic="mov" mem="true">
    <return>Branch.None</return>
    <snippet>        op1.set16(cpu, (short)$op2.get);</snippet>
    <args size="32">Ed;S</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        if (cpu.getCPL() != 0)
         throw ProcessorException.GENERAL_PROTECTION_0;
      $op1.set$cast$op2.get);</snippet>
    <args size="32">R;C</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.getCPL() != 0)
         throw ProcessorException.GENERAL_PROTECTION_0;
      $op1.set$cast$op2.get);</snippet>
    <args size="32">C;R</args>
  </opcode>

  <opcode mnemonic="mov_o16">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="16">Ow;rAX</args>
    <args size="16">rAX;Ow</args>
  </opcode>

  <opcode mnemonic="mov_o32">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="32">Od;rAX</args>
    <args size="32">rAX;Od</args>
  </opcode>

  <opcode mnemonic="movsx">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="16">Gw;Eb</args>
    <args size="32">Gd;Eb</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="movzx">
    <return>Branch.None</return>
    <snippet>        $op1.set$mask2$op2.get);</snippet>
    <args size="16">Gw;Eb</args>
    <args size="32">Gd;Eb</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="nop">
    <return>Branch.None</return>
    <snippet></snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="nop" mem="true">
    <return>Branch.None</return>
    <snippet></snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="not">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast~$op1.get);</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="or">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="or_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="or_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="out">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8($mask1$op1.get))
            cpu.ioports.ioPortWrite8($mask1$op1.get, $mask2$op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="8">Ib;AL</args>
    <args size="8">DX;AL</args>
  </opcode>
  <opcode mnemonic="out_o16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16($mask2$op1.get))
            cpu.ioports.ioPortWrite16($mask1$op1.get, $mask2$op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="16">DX;eAX</args>
  </opcode>
  <opcode mnemonic="out_o32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32($mask1$op1.get))
            cpu.ioports.ioPortWrite32($mask1$op1.get, $op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="32">DX;eAX</args>
  </opcode>

  <opcode mnemonic="outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.outsb_a16(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsb_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.outsb_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.outsw_a16(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.outsd_a16(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.outsd_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsb_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_outsb_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>
  <opcode mnemonic="repne_outsb_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_outsb_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsw_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_outsw_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsd_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_outsd_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pause">
    <return>Branch.None</return>
    <snippet>        // hint that this is a spinloop</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pop" mem="false">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack16(0);
        $op1.set$casttmp);
        cpu.incrementStack(2);</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="pop" mem="true">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.pop16();
        try {
            $op1.set$casttmp);
        } catch (ProcessorException e) {
            cpu.incrementStack(-2);
            throw e;
        }</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="pop" mem="false">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack32(0);
        $op1.set$casttmp);
        cpu.incrementStack(4);</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="pop" mem="true">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.pop32();
        try {
            $op1.set$casttmp);
        } catch (ProcessorException e) {
            cpu.incrementStack(-4);
            throw e;
        }</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="pop_o16">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack16(0);
        $op1.set$casttmp);
        cpu.incrementStack(2);</snippet>
    <args size="16">DS</args>
    <args size="16">ES</args>
    <args size="16">FS</args>
    <args size="16">GS</args>
  </opcode>

  <opcode mnemonic="pop_o16">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack16(0);
        $op1.set$casttmp);
        cpu.incrementStack(2);</snippet>
    <args size="16">SS</args>
  </opcode>

  <opcode mnemonic="pop_o32">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack32(0);
        $op1.set$casttmp);
        cpu.incrementStack(4);
        cpu.eflagsInterruptEnable = false;</snippet>
    <args size="32">SS</args>
  </opcode>

  <opcode mnemonic="pop_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="16">rAXr8</args>
    <args size="16">rBXr11</args>
    <args size="16">rCXr9</args>
    <args size="16">rDXr10</args>
    <args size="16">rSPr12</args>
    <args size="16">rBPr13</args>
    <args size="16">rSIr14</args>
    <args size="16">rDIr15</args>
  </opcode>

  <opcode mnemonic="pop_o32">
    <return>Branch.None</return>
    <snippet>        int tmp = cpu.stack32(0);
        $op1.settmp);
        cpu.incrementStack(4);</snippet>
    <args size="32">DS</args>
    <args size="32">ES</args>
    <args size="32">FS</args>
    <args size="32">GS</args>
  </opcode>

  <opcode mnemonic="pop_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
  </opcode>

  <opcode mnemonic="popa">
    <return>Branch.None</return>
    <snippet>        cpu.popa();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="popad">
    <return>Branch.None</return>
    <snippet>        cpu.popad();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="popfw">
    <return>Branch.None</return>
    <snippet>        cpu.setFlags($castcpu.pop16());</snippet>
    <args size="16"></args>
  </opcode>

  <opcode mnemonic="popfd">
    <return>Branch.None</return>
    <snippet>        if (cpu.getCPL() == 0)
			cpu.setEFlags(((cpu.getEFlags() &amp; 0x20000) | (cpu.pop32() &amp; ~(0x20000 | 0x180000))));
		    else {
			if (cpu.getCPL() > cpu.eflagsIOPrivilegeLevel)
			    cpu.setEFlags(((cpu.getEFlags() &amp; 0x23200) | (cpu.pop32() &amp; ~(0x23200 | 0x180000))));
			else
			    cpu.setEFlags(((cpu.getEFlags() &amp; 0x23000) | (cpu.pop32() &amp; ~(0x23000 | 0x180000))));
		    }</snippet>
    <args size="32"></args>
  </opcode>

  <opcode mnemonic="push">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="16">Iw</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="push_o16">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="16">Ib</args>
    <args size="16">rAXr8</args>
    <args size="16">rCXr9</args>
    <args size="16">rDXr10</args>
    <args size="16">rBXr11</args>
    <args size="16">rSPr12</args>
    <args size="16">rBPr13</args>
    <args size="16">rSIr14</args>
    <args size="16">rDIr15</args>
    <args size="16">CS</args>
    <args size="16">DS</args>
    <args size="16">ES</args>
    <args size="16">FS</args>
    <args size="16">GS</args>
    <args size="16">SS</args>
  </opcode>

  <opcode mnemonic="push_o32">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="32">Ib</args>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
    <args size="32">Id</args>
  </opcode>

  <opcode mnemonic="push_o32">
    <return>Branch.None</return>
    <snippet>        cpu.push$size_o32($cast$op1.get);</snippet>
    <args size="16">CS</args>
    <args size="16">DS</args>
    <args size="16">ES</args>
    <args size="16">FS</args>
    <args size="16">GS</args>
    <args size="16">SS</args>
  </opcode>

  <opcode mnemonic="pusha">
    <return>Branch.None</return>
    <snippet>        cpu.pusha();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushad">
    <return>Branch.None</return>
    <snippet>        cpu.pushad();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfw">
    <return>Branch.None</return>
    <snippet>        cpu.push16((short)cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfd">
    <return>Branch.None</return>
    <snippet>        cpu.push32(~0x30000 &amp; cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rdtsc">
    <return>Branch.None</return>
    <snippet>        if ((cpu.getCPL() == 0) || ((cpu.getCR4() &amp; 0x4) == 0)) {
	    long tsc = cpu.getClockCount();
            cpu.r_eax.set32((int)tsc);
            cpu.r_edx.set32((int)(tsc >> 32));
	} else
	    throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="insb_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.insb_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="insb_a32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.insb_a32(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="insw_a32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.insw_a32(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insb_a32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_insb_a32(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insw_a32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_insw_a32(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>
  <opcode mnemonic="repne_insw_a32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_insw_a32(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insd_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8(cpu.r_dx.get16() &amp; 0xffff))
            StaticOpcodes.rep_insd_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="ret_o16">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        cpu.eip = 0xFFFF &amp; cpu.pop16();</snippet>
    <args size="16"></args>
  </opcode>

  <opcode mnemonic="ret_o16">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        cpu.eip = 0xFFFF &amp; cpu.pop16();
        if (cpu.ss.getDefaultSizeFlag())
            cpu.r_esp.set32(cpu.r_esp.get32()+$op1.get);
        else
            cpu.r_sp.set16(cpu.r_sp.get16()+$op1.get);</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="ret_o32">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = cpu.stack32(0);
        cpu.cs.checkAddress(tmpEip);
        cpu.incrementStack(4);
        cpu.eip = tmpEip;</snippet>
    <args size="32"></args>
  </opcode>

  <opcode mnemonic="ret_o32">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        int tmpEip = cpu.stack32(0);
        cpu.cs.checkAddress(tmpEip);
        cpu.incrementStack(4 + $op1.get);
        cpu.eip = tmpEip;</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="retf_o16">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.ret_far_o16_a32(0);
        else
            cpu.ret_far_o16_a16(0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="retf_o16">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.ret_far_o16_a32($op1.get);
        else
            cpu.ret_far_o16_a16($op1.get);</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="retf_o32">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.ret_far_o32_a32(0);
        else
            cpu.ret_far_o32_a16(0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="retf_o32">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.ss.getDefaultSizeFlag())
            cpu.ret_far_o32_a32($op1.get);
        else
            cpu.ret_far_o32_a16($op1.get);</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="sahf">
    <return>Branch.None</return>
    <snippet>        byte fx  = (byte)(cpu.r_ah.get8());
        cpu.flagStatus &amp;= OF;
        cpu.sf = (fx &amp; (1&lt;&lt;7)) != 0;
        cpu.zf = (fx &amp; (1&lt;&lt;6)) != 0;
        cpu.af = (fx &amp; (1&lt;&lt;4)) != 0;
        cpu.pf = (fx &amp; (1&lt;&lt;2)) != 0;
        cpu.cf = (fx &amp; 1) != 0;;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="seta">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() &amp;&amp; !cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setae">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setb">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setbe">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() || cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setne">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="sete">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setg">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setge">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() == cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setl">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() != cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setle">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.zf() || (cpu.sf() != cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="seto">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.of() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setno">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.of() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setp">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.pf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setnp">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.pf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="sets">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.sf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setns">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.sf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>

  <opcode mnemonic="sgdt_o16">
      <return>Branch.None</return>
      <snippet>        $op1.set160, (short)cpu.gdtr.getLimit());
        $op1.set322, cpu.gdtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sgdt_o32">
      <return>Branch.None</return>
      <snippet>        $op1.set160, (short)cpu.gdtr.getLimit());
        $op1.set322, cpu.gdtr.getBase());</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sidt_o16">
      <return>Branch.None</return>
      <snippet>        $op1.set160, (short)cpu.idtr.getLimit());
        $op1.set322, cpu.idtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>
  <opcode mnemonic="sidt_o32">
      <return>Branch.None</return>
      <snippet>        $op1.set160, (short)cpu.idtr.getLimit());
        $op1.set322, cpu.idtr.getBase());</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sldt">
      <return>Branch.None</return>
      <snippet>        $op1.set$castcpu.ldtr.getSelector());</snippet>
    <args size="16">Ew</args>
  </opcode>
  <opcode mnemonic="sldt">
      <return>Branch.None</return>
      <snippet>        $op1.set0xffff &amp; cpu.ldtr.getSelector());</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="smsw">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(0xFFFF &amp; cpu.getCR0()));</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="sti">
    <return>Branch.None</return>
    <snippet>        if (Processor.cpuLevel >= 5)
        {
            if ((cpu.getCR4() &amp; 2) != 0) // Protected mode Virtual Interrupts enabled
            {
                if ((cpu.getCPL() == 3) &amp;&amp; (cpu.getIOPrivilegeLevel() &lt; 3))
                {
                    if (cpu.getVIP())
                        throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);
                    cpu.eflagsVirtualInterrupt = true;
                    return Branch.None;
                }
            }
        }
        if (cpu.getCPL() > cpu.getIOPrivilegeLevel())
            throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);
        cpu.eflagsInterruptEnable = true;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="stc">
    <return>Branch.None</return>
    <snippet>        cpu.cf(true);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="std">
    <return>Branch.None</return>
    <snippet>        cpu.df = true;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="str">
      <return>Branch.None</return>
      <snippet>        $op1.set 0xffff &amp; cpu.tss.getSelector());</snippet>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="str">
    <return>Branch.None</return>
    <snippet>        $op1.set$castcpu.tss.getSelector());</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="sub">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>

  <opcode mnemonic="sub_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="sub_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="sysenter">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.sysenter();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sysexit">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        cpu.sysexit();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="test">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="test_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
        <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="test_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
        <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="ud2">
    <return>Branch.Exception</return>
    <snippet>        cpu.eip += blockLength;
        if (true) throw ProcessorException.UNDEFINED;</snippet>
        <args size="0"></args>
  </opcode>

  <opcode mnemonic="verr">
    <return>Branch.None</return>
    <snippet>            try {
			Segment test = cpu.getSegment($op1.get &amp; 0xffff);
			int type = test.getType();
			if (((type &amp; ProtectedModeSegment.DESCRIPTOR_TYPE_CODE_DATA) == 0) || (((type &amp; ProtectedModeSegment.TYPE_CODE_CONFORMING) == 0) &amp;&amp; ((cpu.getCPL() > test.getDPL()) || (test.getRPL() > test.getDPL()))))
			    cpu.zf(false);
			else
			    cpu.zf(((type &amp; ProtectedModeSegment.TYPE_CODE) == 0) &amp;&amp; ((type &amp; ProtectedModeSegment.TYPE_CODE_READABLE) != 0));
		    } catch (ProcessorException e) {
			cpu.zf(false);
		    }</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="verw">
    <return>Branch.None</return>
    <snippet>            try {
			Segment test = cpu.getSegment($op1.get &amp; 0xffff);
			int type = test.getType();
			if (((type &amp; ProtectedModeSegment.DESCRIPTOR_TYPE_CODE_DATA) == 0) || (((type &amp; ProtectedModeSegment.TYPE_CODE_CONFORMING) == 0) &amp;&amp; ((cpu.getCPL() > test.getDPL()) || (test.getRPL() > test.getDPL()))))
			    cpu.zf(false);
			else
			    cpu.zf(((type &amp; ProtectedModeSegment.TYPE_CODE) == 0) &amp;&amp; ((type &amp; ProtectedModeSegment.TYPE_DATA_WRITABLE) != 0));
		    } catch (ProcessorException e) {
			cpu.zf(false);
		    }</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="wbinvd">
    <return>Branch.None</return>
    <snippet>            if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rdmsr">
    <return>Branch.None</return>
    <snippet>            if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);//ProcessorException.GENERAL_PROTECTION_0;
	long msr = cpu.getMSR(cpu.r_ecx.get32());
        cpu.r_eax.set32((int) msr);
        cpu.r_edx.set32((int)(msr >> 32));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="wrmsr">
    <return>Branch.None</return>
    <snippet>            if (cpu.getCPL() != 0) throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);//ProcessorException.GENERAL_PROTECTION_0;
		    cpu.setMSR(cpu.r_ecx.get32(), (cpu.r_eax.get32() &amp; 0xffffffffl) | ((cpu.r_edx.get32() &amp; 0xffffffffl) &lt;&lt; 32)); </snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="xadd">
    <return>Branch.None</return>
    <snippet>            int tmp1 = $op1.get;
        int tmp2 = $op2.get;
        cpu.flagOp1 = tmp1;
        cpu.flagOp2 = tmp2;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;
        $op2.set$cast tmp1);
        $op1.set$cast (tmp1+tmp2));</snippet>
    <args size="8">Eb;Gb</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="xchg">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="8">Eb;Gb</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="xchg_o16">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="16">rCXr9;rAX</args>
    <args size="16">rDXr10;rAX</args>
    <args size="16">rBXr11;rAX</args>
    <args size="16">rSPr12;rAX</args>
    <args size="16">rBPr13;rAX</args>
    <args size="16">rSIr14;rAX</args>
    <args size="16">rDIr15;rAX</args>
  </opcode>

  <opcode mnemonic="xchg_o32">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="32">rCXr9;rAX</args>
    <args size="32">rDXr10;rAX</args>
    <args size="32">rBXr11;rAX</args>
    <args size="32">rBPr13;rAX</args>
    <args size="32">rSPr12;rAX</args>
    <args size="32">rSIr14;rAX</args>
    <args size="32">rDIr15;rAX</args>
  </opcode>

   <opcode mnemonic="xor">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get ^ $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">rAX;Iw</args>
    <args size="32">rAX;Id</args>
  </opcode>
</opcodesnippets>