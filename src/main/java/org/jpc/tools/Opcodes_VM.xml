<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <opcode mnemonic="arpl">
    <return>Branch.None</return>
    <snippet>        if (true) throw ProcessorException.UNDEFINED;</snippet>
    <args size="16">Ew;Gw</args>
  </opcode>

  <opcode mnemonic="cli">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel == 3)
        {
            cpu.eflagsInterruptEnable = false;
        }
        else
        {
            if (Processor.cpuLevel >= 5)
                if ((cpu.getCR4() &amp; Processor.CR4_VIRTUAL8086_MODE_EXTENSIONS) != 0)
                {
                    cpu.eflagsVirtualInterrupt = false;
                    return Branch.None;
                }
	        throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION,0,true);//ProcessorException.GENERAL_PROTECTION_0;
        }</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="hlt">
    <return>Branch.Jmp_Unknown</return>
    <snippet>            cpu.eip += blockLength;
            if (true) throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="in">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead8($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">AL;DX</args>
  </opcode>
  <opcode mnemonic="in_o16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead16($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="16">eAX;Ib</args>
    <args size="16">eAX;DX</args>
  </opcode>
  <opcode mnemonic="in_o32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32($mask2$op2.get))
            $op1.setcpu.ioports.ioPortRead32($mask2$op2.get));
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="32">eAX;DX</args>
  </opcode>

  <opcode mnemonic="insw_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.insw_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insw_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.rep_insw_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insd_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.rep_insd_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="int">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        if ((cpu.getCR4() &amp; Processor.CR4_VIRTUAL8086_MODE_EXTENSIONS) != 0)
	    throw new IllegalStateException();
	if (cpu.eflagsIOPrivilegeLevel &lt; 3)
        {
            throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION, 0, true);
        }
	cpu.handleSoftVirtual8086ModeInterrupt($mask$op1.get, instructionLength);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="int3">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.handleSoftProtectedModeInterrupt(3, instructionLength);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="iretw">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip +=  blockLength;
        cpu.iret_vm_o16();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="out">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions8($mask1$op1.get))
            cpu.ioports.ioPortWrite8($mask1$op1.get, $mask2$op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="8">Ib;AL</args>
    <args size="8">DX;AL</args>
  </opcode>
  <opcode mnemonic="out_o16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16($mask1$op1.get))
            cpu.ioports.ioPortWrite16($mask1$op1.get, $mask2$op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="16">DX;eAX</args>
  </opcode>
  <opcode mnemonic="out_o32">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32($mask1$op1.get))
            cpu.ioports.ioPortWrite32($mask1$op1.get, $op2.get);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="32">DX;eAX</args>
  </opcode>

  <opcode mnemonic="outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.outsw_a16(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.outsd_a16(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a32" segment="true">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.outsd_a32(cpu, seg);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsw_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions16(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.rep_outsw_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsd_a16">
    <return>Branch.None</return>
    <snippet>        if (cpu.checkIOPermissions32(0xffff &amp; cpu.r_dx.get16()))
            StaticOpcodes.rep_outsd_a16(cpu, cpu.es);
        else
            throw ProcessorException.GENERAL_PROTECTION_0;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="popfw">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel &lt; 3)
            throw ProcessorException.GENERAL_PROTECTION_0;
        int flags = cpu.getEFlags() &amp; ~0xcfff;
        flags |= (cpu.pop16() &amp; 0xcfff);
        cpu.setFlags($cast flags);</snippet>
    <args size="16"></args>
  </opcode>

  <opcode mnemonic="popfd">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel &lt; 3)
            throw ProcessorException.GENERAL_PROTECTION_0;
        int flags = cpu.getEFlags() &amp; ~0x24cfff;
        flags |= (cpu.pop32() &amp; 0x24cfff);
        cpu.setEFlags(flags);</snippet>
    <args size="32"></args>
  </opcode>

  <opcode mnemonic="pushfw">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel &lt; 3)
            throw ProcessorException.GENERAL_PROTECTION_0;
        cpu.push16((short)cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfd">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel &lt; 3)
            throw ProcessorException.GENERAL_PROTECTION_0;
        cpu.push32(cpu.getEFlags() &amp; ~0x30000);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sti">
    <return>Branch.None</return>
    <snippet>        if (cpu.eflagsIOPrivilegeLevel == 3)
        {
            cpu.eflagsInterruptEnable = true;
        }
	else
        {
	    if (!cpu.eflagsVirtualInterruptPending &amp;&amp; ((cpu.getCR4() &amp; Processor.CR4_VIRTUAL8086_MODE_EXTENSIONS) != 0))
	        cpu.eflagsVirtualInterrupt = true;
	    else
	        throw new ProcessorException(ProcessorException.Type.GENERAL_PROTECTION,0,true);//ProcessorException.GENERAL_PROTECTION_0;
        }</snippet>
    <args size="0"></args>
  </opcode>
</opcodesnippets>