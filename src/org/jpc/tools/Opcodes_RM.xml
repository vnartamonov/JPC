<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <opcode mnemonic="arpl">
    <return>Branch.None</return>
    <snippet>        if (true) throw ProcessorException.UNDEFINED;</snippet>
    <args size="16">Ew;Gw</args>
  </opcode>

  <opcode mnemonic="bound_o16">
    <return>Branch.None</return>
    <snippet>        int addr = $op2.get;
        short lower = (short)cpu.physicalMemory.getWord(addr);
	short upper = (short)cpu.physicalMemory.getWord(addr+2);
	short index = (short)$op1.get;
	if ((index &lt; lower) || (index > upper))
	    throw ProcessorException.BOUND_RANGE;</snippet>
    <args size="16">Gw;M</args>
  </opcode>

  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($op2.get));
	}</snippet>
    <args size="32">Gd;Ed</args>
  </opcode>
  <opcode mnemonic="bsr">
    <return>Branch.None</return>
    <snippet>        if ($op2.get == 0) {
	    cpu.zf(true);
	} else {
	    cpu.zf(false);
	    $op1.set31-StaticOpcodes.numberOfLeadingZeros($mask$op2.get));
	}</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>

  <opcode mnemonic="cli">
    <return>Branch.None</return>
    <snippet>        cpu.eflagsInterruptEnable = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="clts">
    <return>Branch.None</return>
    <snippet>        cpu.setCR0(cpu.getCR0() &amp; ~0x8);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmovb">
    <return>Branch.None</return>
    <snippet>        if (cpu.cf())
            $op1.set$cast$op2.get);</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>
  <opcode mnemonic="cmovne">
    <return>Branch.None</return>
    <snippet>        if (!cpu.zf())
            $op1.set$cast$op2.get);</snippet>
    <args size="16">Gw;Ew</args>
  </opcode>

  <opcode mnemonic="cbw">
    <return>Branch.None</return>
    <snippet>            cpu.r_ax.set16((byte)cpu.r_al.get8());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cdq">
    <return>Branch.None</return>
    <snippet>        if (cpu.r_eax.get32() &lt; 0)
            cpu.r_edx.set32(-1);
        else
            cpu.r_edx.set32(0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cpuid">
    <return>Branch.None</return>
    <snippet>        cpu.cpuid();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="hlt">
    <return>Branch.Jmp_Unknown</return>
    <snippet>            cpu.eip += blockLength;
            cpu.waitForInterrupt();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="in">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead8($mask2$op2.get));</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">AL;DX</args>
  </opcode>
  <opcode mnemonic="in_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead16($mask2$op2.get));</snippet>
    <args size="16">eAX;DX</args>
    <args size="16">eAX;Ib</args>
  </opcode>
  <opcode mnemonic="in_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.ioports.ioPortRead32($mask2$op2.get));</snippet>
    <args size="32">eAX;DX</args>
  </opcode>

  <opcode mnemonic="insb_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.insb_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="insw_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.insw_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insw_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_insw_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_insd_a16">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_insd_a16(cpu, cpu.es);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="int">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16($mask$op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="int1">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16(1);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="int3">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.int_o16_a16(3);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="into">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        if (cpu.of()) cpu.int_o16_a16(4);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="iretw">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        cpu.iret_o16_a16();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="iretd">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip += blockLength;
        cpu.iret_o32_a16();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="lidt_o16" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = 0x00ffffff &amp; $op1.get322);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lidt_o32" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = $op1.get322);
        cpu.idtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lmsw">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.eip &amp;= 0xFFFF;
        cpu.setCR0((cpu.getCR0() &amp; ~0xf) | ($op1.get &amp; 0xf));</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="lgdt_o16" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = 0x00ffffff &amp; $op1.get322);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="lgdt_o32" mem="true">
      <return>Branch.None</return>
      <snippet>        int limit = 0xffff &amp; $op1.get160);
        int base = $op1.get322);
        cpu.gdtr = cpu.createDescriptorTableSegment(base, limit);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="mov_o16">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="16">Ow;rAX</args>
    <args size="16">rAX;Ow</args>
  </opcode>

  <opcode mnemonic="mov_o32">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="32">Od;rAX</args>
    <args size="32">rAX;Od</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        $op1.set$cast$op2.get);</snippet>
    <args size="32">C;R</args>
    <args size="32">D;R</args>
  </opcode>

  <opcode mnemonic="out">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite8($mask1$op1.get, $mask2$op2.get);</snippet>
    <args size="8">Ib;AL</args>
    <args size="8">DX;AL</args>
  </opcode>
  <opcode mnemonic="out_o16">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite16($mask1$op1.get, $mask2$op2.get);</snippet>
    <args size="16">Ib;eAX</args>
    <args size="16">DX;eAX</args>
  </opcode>
  <opcode mnemonic="out_o32">
    <return>Branch.None</return>
    <snippet>        cpu.ioports.ioPortWrite32($mask1$op1.get, $op2.get);</snippet>
    <args size="32">DX;eAX</args>
  </opcode>

  <opcode mnemonic="outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsw_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.outsd_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>
  <opcode mnemonic="repne_outsb_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsb_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsw_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsw_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_outsd_a16" segment="true">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.rep_outsd_a16(cpu, seg);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="rep_pop_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="16">ES</args>
  </opcode>

  <opcode mnemonic="popfw">
    <return>Branch.None</return>
    <snippet>        cpu.setFlags($castcpu.pop16());</snippet>
    <args size="16"></args>
  </opcode>

  <opcode mnemonic="popfd">
    <return>Branch.None</return>
    <snippet>        cpu.setEFlags((cpu.getEFlags() &amp; 0x20000) | (cpu.pop32() &amp; ~0x1a0000));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfw">
    <return>Branch.None</return>
    <snippet>        cpu.push16((short)cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushfd">
    <return>Branch.None</return>
    <snippet>        cpu.push32(~0x30000 &amp; cpu.getEFlags());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="salc">
    <return>Branch.None</return>
    <snippet>        cpu.r_al.set8((byte)(cpu.cf() ? -1 : 0));</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="seta">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() &amp;&amp; !cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setae">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setb">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setbe">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.cf() || cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setne">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(!cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="sete">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(cpu.zf() ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setg">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setge">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() == cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setl">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.sf() != cpu.of()) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>
  <opcode mnemonic="setle">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast((cpu.zf() || (cpu.sf() != cpu.of())) ? 1 : 0));</snippet>
    <args size="8">Eb</args>
  </opcode>

  <opcode mnemonic="sti">
    <return>Branch.None</return>
    <snippet>        //cpu.eflagsInterruptEnableSoon = true;
        cpu.eflagsInterruptEnable = true;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sgdt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        cpu.linearMemory.setWord(addr, (short)cpu.gdtr.getLimit());
        cpu.linearMemory.setDoubleWord(addr+2, cpu.gdtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sidt_o16">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        cpu.linearMemory.setWord(addr, (short)cpu.idtr.getLimit());
        cpu.linearMemory.setDoubleWord(addr+2, cpu.idtr.getBase() &amp; 0x00ffffff);</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="sidt_o32">
      <return>Branch.None</return>
      <snippet>        int addr = $op1.get + op1.getBase(cpu);
        cpu.linearMemory.setWord(addr, (short)cpu.idtr.getLimit());
        cpu.linearMemory.setDoubleWord(addr+2, cpu.idtr.getBase());</snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="wbinvd">
    <return>Branch.None</return>
    <snippet>// write back and invalidate CPU caches</snippet>
    <args size="0"></args>
  </opcode>
</opcodesnippets>