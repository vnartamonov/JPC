<?xml version="1.0"?>
<?xml-stylesheet href="x86optable.xsl" type="text/xsl"?>
<opcodesnippets>
  <jcc>        {
            int target = (cpu.eip + jmp + blockLength) &amp; 0xffff;
            cpu.cs.checkAddress(target);
            cpu.eip = target;
            return Branch.T1;
        }
        else
        {
            cpu.eip += blockLength;
            return Branch.T2;
        }</jcc>

  <opcode mnemonic="eip_update">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;</snippet>
    <args size="0"></args>
  </opcode>
  
  <opcode mnemonic="aaa">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aaa(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="aad">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aad(cpu, $op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aam">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aam(cpu, $mask$op1.get);</snippet>
    <args size="8">Ib</args>
  </opcode>

  <opcode mnemonic="aas">
    <return>Branch.None</return>
    <snippet>        StaticOpcodes.aas(cpu);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="adc">
    <return>Branch.None</return>
    <snippet>        boolean incf = cpu.cf();
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2 + (incf ? 1 : 0));
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADC$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="adc_o16">
    <return>Branch.None</return>
    <snippet>        boolean incf = cpu.cf();
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2 + (incf ? 1 : 0));
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADC$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="add">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = $cast$op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="add_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="add_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 + cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="and">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="8">Eb;Ib</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="and_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="and_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="bswap_o16">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast0);</snippet>
    <args size="16">rAXr8</args>
    <args size="16">rCXr9</args>
    <args size="16">rDXr10</args>
    <args size="16">rBXr11</args>
    <args size="16">rSPr12</args>
    <args size="16">rBPr13</args>
    <args size="16">rSIr14</args>
    <args size="16">rDIr15</args>
  </opcode>

  <opcode mnemonic="bswap_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setInteger.reverseBytes($op1.get));</snippet>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
  </opcode>

  <opcode mnemonic="call">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        if (((0xffff &amp; cpu.r_sp.get16()) &lt; 2) &amp;&amp; (cpu.r_sp.get16() != 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push16((short)cpu.eip);
        cpu.eip += jmp;
        cpu.eip &amp;= 0xffff;</snippet>
    <args size="16">Jw</args>
  </opcode>
  <opcode mnemonic="call">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += blockLength;
        if ((cpu.r_esp.get32() &lt; 4) &amp;&amp; (cpu.r_esp.get32() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        cpu.push32(cpu.eip);
        cpu.eip += jmp;</snippet>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="call_o16">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        if (((0xffff &amp; cpu.r_sp.get16()) &lt; 2) &amp;&amp; ((cpu.r_esp.get16() &amp; 0xffff) > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        int target = $op1.get;
        cpu.push16((short)cpu.eip);
        cpu.eip = 0xffff &amp; target;</snippet>
    <args size="16">Ew</args>
  </opcode>
  <opcode mnemonic="call_o32">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        if ((cpu.r_esp.get32() &lt; 4) &amp;&amp; (cpu.r_esp.get32() > 0))
	    throw ProcessorException.STACK_SEGMENT_0;
        int target = $op1.get;
        cpu.push32(cpu.eip);
        cpu.eip = target;</snippet>
    <args size="32">Ed</args>
  </opcode>
  <opcode mnemonic="call_o16">
    <return>Branch.Call_Unknown</return>
    <snippet>        cpu.eip += blockLength;
        cpu.callFar(cs, (short)targetEip);</snippet>
    <args size="16">Ep</args>
    <args size="16">Ap</args>
  </opcode>

  <opcode mnemonic="clc">
    <return>Branch.None</return>
    <snippet>        cpu.cf(false);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cld">
    <return>Branch.None</return>
    <snippet>        cpu.df = false;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cmp">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = $cast$op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="cmp_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="cmp_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = $op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="cwd">
    <return>Branch.None</return>
    <snippet>        if ((short)cpu.r_ax.get16() &lt; 0)
            cpu.r_dx.set16((short)-1);
        else
            cpu.r_dx.set16((short)0);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="cwde">
    <return>Branch.None</return>
    <snippet>            cpu.r_eax.set32((short)cpu.r_ax.get16());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="dec">
    <return>Branch.None</return>
    <snippet>        cpu.cf = cpu.cf();
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="dec_o16">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="16">eAX</args>
    <args size="16">eBX</args>
    <args size="16">eCX</args>
    <args size="16">eDX</args>
    <args size="16">eSI</args>
    <args size="16">eDI</args>
    <args size="16">eSP</args>
    <args size="16">eBP</args>
  </opcode>

  <opcode mnemonic="dec_o32">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 - 1);
        $op1.setcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="32">eAX</args>
    <args size="32">eBX</args>
    <args size="32">eCX</args>
    <args size="32">eDX</args>
    <args size="32">eSI</args>
    <args size="32">eDI</args>
    <args size="32">eSP</args>
    <args size="32">eBP</args>
  </opcode>

  <opcode mnemonic="enter_o16">
    <return>Branch.None</return>
    <snippet>            int frameSize = 0xffff &amp; $op1.get;
        int nestingLevel = $op2.get;
        nestingLevel &amp;= 0x1f;

        cpu.push16((short)cpu.r_bp.get16());
        int frame_ptr16 = 0xffff &amp; cpu.r_esp.get16();

	if (cpu.ss.getDefaultSizeFlag())
        {
            int tmpebp = cpu.r_ebp.get32();
            if (nestingLevel != 0) {
	        while (--nestingLevel != 0) {
                    tmpebp -= 2;
                    cpu.push16(cpu.ss.getWord(tmpebp));
                }
                cpu.push16((short)frame_ptr16);
            }
        } else
        {
            int tmpbp = 0xffff &amp; cpu.r_ebp.get16();
            if (nestingLevel != 0) {
	        while (--nestingLevel != 0) {
                    tmpbp -= 2;
                    cpu.push16(cpu.ss.getWord(tmpbp));
                }
                cpu.push16((short)frame_ptr16);
            }
        }

        cpu.r_sp.set16((short)(cpu.r_sp.get16()-frameSize)); // TODO: do a write permission check here
        cpu.r_bp.set16((short)frame_ptr16);</snippet>
    <args size="16">Iw;Ib</args>
  </opcode>

  <opcode mnemonic="inc">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="inc_o16">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="16">eAX</args>
    <args size="16">eBX</args>
    <args size="16">eCX</args>
    <args size="16">eDX</args>
    <args size="16">eSP</args>
    <args size="16">eBP</args>
    <args size="16">eSI</args>
    <args size="16">eDI</args>
  </opcode>

  <opcode mnemonic="inc_o32">
    <return>Branch.None</return>
    <snippet>        cpu.cf = Processor.getCarryFlag(cpu.flagStatus, cpu.cf, cpu.flagOp1, cpu.flagOp2, cpu.flagResult, cpu.flagIns);
        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = 1;
        cpu.flagResult = $cast(cpu.flagOp1 + 1);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.ADD$size;
        cpu.flagStatus = NCF;</snippet>
    <args size="32">eAX</args>
    <args size="32">eBX</args>
    <args size="32">eCX</args>
    <args size="32">eDX</args>
    <args size="32">eSP</args>
    <args size="32">eBP</args>
    <args size="32">eSI</args>
    <args size="32">eDI</args>
  </opcode>

  <opcode mnemonic="je">
    <return></return>
    <snippet>        if (cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jne">
    <return></return>
    <snippet>        if (!cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jl">
    <return></return>
    <snippet>        if (cpu.sf() != cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jle">
    <return></return>
    <snippet>        if (cpu.zf() || (cpu.sf() != cpu.of()))
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jb">
    <return></return>
    <snippet>        if (cpu.cf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jbe">
    <return></return>
    <snippet>        if (cpu.cf() || cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="ja">
    <return></return>
    <snippet>        if (!cpu.cf() &amp;&amp; !cpu.zf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jae">
    <return></return>
    <snippet>        if (!cpu.cf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jg">
    <return></return>
    <snippet>        if (!cpu.zf() &amp;&amp; (cpu.sf() == cpu.of()))
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jge">
    <return></return>
    <snippet>        if (cpu.sf() == cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jo">
    <return></return>
    <snippet>        if (cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jno">
    <return></return>
    <snippet>        if (!cpu.of())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="js">
    <return></return>
    <snippet>        if (cpu.sf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jns">
    <return></return>
    <snippet>        if (!cpu.sf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jp">
    <return></return>
    <snippet>        if (cpu.pf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jnp">
    <return></return>
    <snippet>        if (!cpu.pf())
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>

  <opcode mnemonic="jcxz">
    <return></return>
    <snippet>        if (cpu.r_cx.get16() == 0)
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jecxz">
    <return></return>
    <snippet>        if (cpu.r_ecx.get32() == 0)
    </snippet>
    <jcc/>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>

  <opcode mnemonic="jmp">
    <return>Branch.T1</return>
    <snippet>        cpu.eip += jmp+blockLength;
        cpu.eip &amp;= 0xFFFF;</snippet>
    <args size="8">Jb</args>
    <args size="16">Jw</args>
    <args size="32">Jd</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.eip = $mask$op1.get;</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="jmp">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.jumpFar(cs, targetEip);</snippet>
    <args size="0">Ap</args>
  </opcode>
  <opcode mnemonic="jmp">
    <return>Branch.Jmp_Unknown</return>
    <snippet>        cpu.jumpFar(cs, 0xffff &amp; targetEip);</snippet>
    <args size="16">Ep</args>
  </opcode>

  <opcode mnemonic="loop_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if (cpu.r_cx.get16() != 0)</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loope_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if ((cpu.r_cx.get16() != 0) &amp;&amp; cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loopne_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if ((cpu.r_cx.get16() != 0) &amp;&amp; !cpu.zf())</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="lahf">
      <return>Branch.None</return>
      <snippet>        int result = 0x02;
        if (cpu.sf()) result |= 0x80;
        if (cpu.zf()) result |= 0x40;
        if (cpu.af()) result |= 0x10;
        if (cpu.pf()) result |= 0x04;
        if (cpu.cf()) result |= 0x01;
        cpu.r_ah.set8((byte) result);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="lea">
    <return>Branch.None</return>
    <snippet>        $op1.set$op2.get);</snippet>
    <args size="16">Gw;M</args>
    <args size="32">Gd;M</args>
  </opcode>

  <opcode mnemonic="leave_o16">
    <return>Branch.None</return>
    <snippet>        try {
	    cpu.ss.checkAddress(cpu.r_ebp.get16() &amp; 0xffff);
	} catch (ProcessorException e) {
	    throw ProcessorException.STACK_SEGMENT_0;
	}
        if (cpu.ss.getDefaultSizeFlag())
        {
	    cpu.r_esp.set32(cpu.r_ebp.get32());
            cpu.r_ebp.set32(cpu.pop32());
        } else
        {
	    cpu.r_sp.set16(cpu.r_bp.get16());
            cpu.r_bp.set16(cpu.pop16());
        }</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="loop_a16">
      <return></return>
      <snippet>        cpu.r_cx.set16(cpu.r_cx.get16()-1);
        if (cpu.r_cx.get16() != 0)
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="loop_a32">
      <return></return>
      <snippet>        cpu.r_ecx.set32(cpu.r_ecx.get32()-1);
        if (cpu.r_ecx.get32() != 0)
</snippet>
<jcc/>
    <args size="8">Jb</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast$op2.get);</snippet>
    <args size="8">Ob;AL</args>
    <args size="16">Ow;rAX</args>
    <args size="16">rAX;Ow</args>
    <args size="32">Od;rAX</args>
    <args size="32">rAX;Od</args>
    <args size="8">AL;Ob</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="8">ALr8b;Ib</args>
    <args size="8">AHr12b;Ib</args>
    <args size="8">BLr11b;Ib</args>
    <args size="8">BHr15b;Ib</args>
    <args size="8">CLr9b;Ib</args>
    <args size="8">CHr13b;Ib</args>
    <args size="8">DLr10b;Ib</args>
    <args size="8">DHr14b;Ib</args>
    <args size="16">Ew;S</args>
    <args size="32">Ed;S</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">rAXr8;Iw</args>
    <args size="32">rAXr8;Id</args>
    <args size="16">rCXr9;Iw</args>
    <args size="32">rCXr9;Id</args>
    <args size="16">rDXr10;Iw</args>
    <args size="32">rDXr10;Id</args>
    <args size="16">rBXr11;Iw</args>
    <args size="32">rBXr11;Id</args>
    <args size="16">rSPr12;Iw</args>
    <args size="32">rSPr12;Id</args>
    <args size="16">rBPr13;Iw</args>
    <args size="32">rBPr13;Id</args>
    <args size="16">rSIr14;Iw</args>
    <args size="32">rSIr14;Id</args>
    <args size="16">rDIr15;Iw</args>
    <args size="32">rDIr15;Id</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        if (segIndex == 1)
            throw ProcessorException.UNDEFINED;
        $op1.set$cast$op2.get);</snippet>
    <args size="16">S;Ew</args>
  </opcode>

  <opcode mnemonic="mov">
    <return>Branch.None</return>
    <snippet>        if (cpu.getCPL() != 0)
         throw ProcessorException.GENERAL_PROTECTION_0;
      $op1.set$cast$op2.get);</snippet>
    <args size="32">R;C</args>
  </opcode>

  <opcode mnemonic="movsx">
    <return>Branch.None</return>
    <snippet>        $op1.set$op2.get);</snippet>
    <args size="16">Gw;Eb</args>
    <args size="32">Gd;Eb</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="movzx">
    <return>Branch.None</return>
    <snippet>        $op1.set$mask2$op2.get);</snippet>
    <args size="16">Gw;Eb</args>
    <args size="32">Gd;Eb</args>
    <args size="32">Gd;Ew</args>
  </opcode>

  <opcode mnemonic="nop">
    <return>Branch.None</return>
    <snippet></snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="nop" mem="true">
    <return>Branch.None</return>
    <snippet></snippet>
    <args size="0">M</args>
  </opcode>

  <opcode mnemonic="not">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast~$op1.get);</snippet>
    <args size="8">Eb</args>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="or">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
  </opcode>
  <opcode mnemonic="rep_or">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">Eb;Gb</args>
  </opcode>

  <opcode mnemonic="or_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="or_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get | $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="pop">
    <return>Branch.None</return>
    <snippet>        $op1.set$castcpu.pop$size());</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="pop_o16">
    <return>Branch.None</return>
    <snippet>        $op1.set$castcpu.pop$size());</snippet>
    <args size="16">SS</args>
  </opcode>

  <opcode mnemonic="pop_o16">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="16">rAXr8</args>
    <args size="16">rBXr11</args>
    <args size="16">rCXr9</args>
    <args size="16">rDXr10</args>
    <args size="16">rSPr12</args>
    <args size="16">rBPr13</args>
    <args size="16">rSIr14</args>
    <args size="16">rDIr15</args>
    <args size="16">DS</args>
    <args size="16">ES</args>
    <args size="16">FS</args>
    <args size="16">GS</args>
  </opcode>

  <opcode mnemonic="pop_o32">
    <return>Branch.None</return>
    <snippet>        $op1.setcpu.pop$size());</snippet>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
  </opcode>

  <opcode mnemonic="popa">
    <return>Branch.None</return>
    <snippet>        cpu.popa();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="popad">
    <return>Branch.None</return>
    <snippet>        cpu.popad();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="push">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="16">Ew</args>
    <args size="32">Ed</args>
  </opcode>

  <opcode mnemonic="push_o16">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="16">Ib</args>
    <args size="16">rAXr8</args>
    <args size="16">rCXr9</args>
    <args size="16">rDXr10</args>
    <args size="16">rBXr11</args>
    <args size="16">rSPr12</args>
    <args size="16">rBPr13</args>
    <args size="16">rSIr14</args>
    <args size="16">rDIr15</args>
    <args size="16">CS</args>
    <args size="16">DS</args>
    <args size="16">ES</args>
    <args size="16">FS</args>
    <args size="16">GS</args>
    <args size="16">SS</args>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="push_o32">
    <return>Branch.None</return>
    <snippet>        cpu.push$size($cast$op1.get);</snippet>
    <args size="32">Ib</args>
    <args size="32">rAXr8</args>
    <args size="32">rCXr9</args>
    <args size="32">rDXr10</args>
    <args size="32">rBXr11</args>
    <args size="32">rSPr12</args>
    <args size="32">rBPr13</args>
    <args size="32">rSIr14</args>
    <args size="32">rDIr15</args>
    <args size="32">Id</args>
  </opcode>

  <opcode mnemonic="push_o32">
    <return>Branch.None</return>
    <snippet>        cpu.push$size_o32($cast$op1.get);</snippet>
    <args size="16">CS</args>
  </opcode>

  <opcode mnemonic="pusha">
    <return>Branch.None</return>
    <snippet>        cpu.pusha();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="pushad">
    <return>Branch.None</return>
    <snippet>        cpu.pushad();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="ret_o16">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip = 0xFFFF&amp;cpu.pop16();</snippet>
    <args size="0"></args>
  </opcode>
  <opcode mnemonic="ret_o32">
    <return>Branch.Ret</return>
    <snippet>        cpu.eip = cpu.pop32();</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="ret">
    <return>Branch.Ret</return>
    <snippet>        //System.out.printf("Reading return address from %08x\n", cpu.r_esp.get32());
        cpu.eip = 0xFFFF&amp;cpu.pop16();
        if (cpu.ss.getDefaultSizeFlag())
            cpu.r_esp.set32(cpu.r_esp.get32()+$op1.get);
        else
            cpu.r_sp.set16(cpu.r_esp.get16()+$op1.get);
        //System.out.printf("Return to %08x\n", cpu.eip);</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="retf">
    <return>Branch.Ret</return>
    <snippet>        //System.out.printf("Reading far return address from %08x\n", cpu.r_esp.get32());
        cpu.eip = 0xFFFF&amp;cpu.pop16();
        //System.out.printf("Far return to eip=%08x\n", cpu.eip);
        cpu.cs(0xffff &amp; cpu.pop16());</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="retf">
    <return>Branch.Ret</return>
    <snippet>        //System.out.printf("Reading far return address from %08x\n", cpu.r_esp.get32());
        cpu.eip = 0xFFFF&amp;cpu.pop16();
        //System.out.printf("Far return to eip=%08x\n", cpu.eip);
        cpu.cs(0xffff &amp; cpu.pop16());
        if (cpu.ss.getDefaultSizeFlag())
            cpu.r_esp.set32(cpu.r_esp.get32()+$op1.get);
        else
            cpu.r_sp.set16(cpu.r_esp.get16()+$op1.get);</snippet>
    <args size="16">Iw</args>
  </opcode>

  <opcode mnemonic="sahf">
    <return>Branch.None</return>
    <snippet>        byte fx  = (byte)(cpu.r_ah.get8());
        cpu.flagStatus &amp;= OF;
        cpu.sf = (fx &amp; (1&lt;&lt;7)) != 0;
        cpu.zf = (fx &amp; (1&lt;&lt;6)) != 0;
        cpu.af = (fx &amp; (1&lt;&lt;4)) != 0;
        cpu.pf = (fx &amp; (1&lt;&lt;2)) != 0;
        cpu.cf = (fx &amp; 1) != 0;;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sldt">
    <return>Branch.None</return>
    <snippet>        if (true) throw ProcessorException.UNDEFINED;</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="smsw">
    <return>Branch.None</return>
    <snippet>        $op1.set$cast(0xFFFF &amp; cpu.getCR0()));</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="stc">
    <return>Branch.None</return>
    <snippet>        cpu.cf(true);</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="std">
    <return>Branch.None</return>
    <snippet>        cpu.df = true;</snippet>
    <args size="0"></args>
  </opcode>

  <opcode mnemonic="sub">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = $cast$op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="sub_o16">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = $cast$op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="sub_o32">
    <return>Branch.None</return>
    <snippet>        cpu.flagOp1 = $cast$op1.get;
        cpu.flagOp2 = $cast$op2.get;
        cpu.flagResult = $cast(cpu.flagOp1 - cpu.flagOp2);
        $op1.set$castcpu.flagResult);
        cpu.flagIns = UCodes.SUB$size;
        cpu.flagStatus = OSZAPC;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="test">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="32">Ed;Id</args>
  </opcode>

  <opcode mnemonic="test_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="test_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get &amp; $op2.get);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>

  <opcode mnemonic="verr">
    <return>Branch.None</return>
    <snippet>        if (true) throw ProcessorException.UNDEFINED;</snippet>
    <args size="16">Ew</args>
  </opcode>

  <opcode mnemonic="xchg">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="8">Eb;Gb</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
  </opcode>

  <opcode mnemonic="xchg_o16">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="16">rCXr9;rAX</args>
    <args size="16">rDXr10;rAX</args>
    <args size="16">rBXr11;rAX</args>
    <args size="16">rSPr12;rAX</args>
    <args size="16">rBPr13;rAX</args>
    <args size="16">rSIr14;rAX</args>
    <args size="16">rDIr15;rAX</args>
  </opcode>

  <opcode mnemonic="xchg_o32">
    <return>Branch.None</return>
    <snippet>            int tmp2 = $op2.get;
        int tmp1 = $op1.get;
        $op1.set$casttmp2);
        $op2.settmp1);</snippet>
    <args size="32">rCXr9;rAX</args>
    <args size="32">rDXr10;rAX</args>
    <args size="32">rBXr11;rAX</args>
    <args size="32">rBPr13;rAX</args>
    <args size="32">rSPr12;rAX</args>
    <args size="32">rSIr14;rAX</args>
    <args size="32">rDIr15;rAX</args>
  </opcode>

  <opcode mnemonic="xor">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get ^ $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="8">AL;Ib</args>
    <args size="8">Eb;Gb</args>
    <args size="8">Eb;Ib</args>
    <args size="8">Gb;Eb</args>
    <args size="16">Ew;Ib</args>
    <args size="32">Ed;Ib</args>
    <args size="32">Ed;Id</args>
    <args size="16">Ew;Gw</args>
    <args size="32">Ed;Gd</args>
    <args size="16">Ew;Iw</args>
    <args size="16">Gw;Ew</args>
    <args size="32">Gd;Ed</args>
  </opcode>

  <opcode mnemonic="xor_o16">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get ^ $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="16">rAX;Iw</args>
  </opcode>

  <opcode mnemonic="xor_o32">
    <return>Branch.None</return>
    <snippet>        cpu.of = cpu.af = cpu.cf = false;
        cpu.flagResult = $cast($op1.get ^ $op2.get);
        $op1.set$castcpu.flagResult);
        cpu.flagStatus = SZP;</snippet>
    <args size="32">rAX;Id</args>
  </opcode>
</opcodesnippets>